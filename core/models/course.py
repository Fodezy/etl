# generated by datamodel-codegen:
#   filename:  universal_course.json
#   timestamp: 2025-06-03T20:42:42+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, EmailStr, Field


class CourseStatus(Enum):
    Active = 'Active'
    Inactive = 'Inactive'
    New = 'New'
    Retired = 'Retired'
    Pending_Review = 'Pending Review'
    Cancelled = 'Cancelled'
    Closed = 'Closed'


class Department(BaseModel):
    deptId: str = Field(..., description='System-generated unique ID.')
    code: Optional[str] = Field(None, description="School-local dept code (e.g. 'CS').")
    name: str = Field(..., description='Full dept/faculty name.')
    parentId: Optional[str] = Field(None, description='deptId of parent unit, if any.')


class Season(Enum):
    Winter = 'Winter'
    Spring = 'Spring'
    Summer = 'Summer'
    Fall = 'Fall'


class Term(BaseModel):
    termId: str = Field(..., description="Canonical ID, e.g. '2025FA'.")
    year: int = Field(..., description='Calendar year, e.g. 2025.')
    season: Season = Field(..., description='Season name.')
    startDate: Optional[date] = Field(None, description='Term start date.')
    endDate: Optional[date] = Field(None, description='Term end date.')


class Instructor(BaseModel):
    instructorId: str = Field(..., description='System-generated unique ID.')
    name: str = Field(..., description='Full name.')
    email: EmailStr = Field(..., description='Contact email.')
    role: Optional[str] = Field(
        None, description="Teaching role (e.g. 'Lecturer','TA')."
    )
    departmentId: Optional[str] = Field(None, description='deptId of home department.')


class Type(Enum):
    Lecture = 'Lecture'
    Lab = 'Lab'
    Tutorial = 'Tutorial'
    Exam = 'Exam'
    Other = 'Other'
    Seminar = 'Seminar'


class DayOfWeekEnum(Enum):
    Mon = 'Mon'
    Tue = 'Tue'
    Wed = 'Wed'
    Thu = 'Thu'
    Fri = 'Fri'
    Sat = 'Sat'
    Sun = 'Sun'


class Meeting(BaseModel):
    type: Type = Field(..., description='Block type.')
    dayOfWeek: Optional[List[DayOfWeekEnum]] = Field(None, description='Days of week.')
    startTime: Optional[str] = Field(None, pattern='^([01]\\d|2[0-3]):([0-5]\\d)$')
    endTime: Optional[str] = Field(None, pattern='^([01]\\d|2[0-3]):([0-5]\\d)$')
    startDate: Optional[date] = None
    endDate: Optional[date] = None
    location: Optional[str] = None
    raw: Optional[str] = Field(None, description='Original raw schedule text.')


class Delivery(Enum):
    InPerson = 'InPerson'
    Online = 'Online'
    Hybrid = 'Hybrid'
    Distance = 'Distance'


class Section(BaseModel):
    sectionId: str
    courseCode: str
    termId: str
    sectionCode: Optional[str] = None
    status: Optional[str] = None
    capacity: Optional[int] = Field(None, ge=0)
    enrolled: Optional[int] = Field(None, ge=0)
    waitlist: Optional[int] = Field(None, ge=0)
    delivery: Optional[Delivery] = None
    instructors: Optional[List[Instructor]] = None
    meetings: Optional[List[Meeting]] = None
    raw: Optional[Dict[str, Any]] = Field(
        None, description='All raw source-section fields.'
    )


class Type1(Enum):
    AND = 'AND'
    OR = 'OR'
    COURSE = 'COURSE'
    CREDITS = 'CREDITS'
    N_OF = 'N_OF'
    RAW_UNPARSED = 'RAW_UNPARSED'
    PROGRAM_REGISTRATION = 'PROGRAM_REGISTRATION'
    SUBJECT_CREDITS_AT_LEVEL = 'SUBJECT_CREDITS_AT_LEVEL'
    MIN_AVERAGE = 'MIN_AVERAGE'


class RequisiteExpression(BaseModel):
    type: Type1 = Field(
        ...,
        description="The type of requisite: logical operator (AND/OR), a single course, a credit requirement, 'N of' a set of courses, a program registration, subject-specific credits at a level, minimum average, or an unparsed raw string.",
    )
    count: Optional[int] = Field(
        None, description="The number of courses required if type is 'N_OF'.", ge=1
    )
    courses: Optional[List[str]] = Field(
        None,
        description="Array of course codes (e.g., 'ACCT*1240', 'ACCT*2230') if type is COURSE or N_OF, or courses involved in an AND/OR. This should use canonical course codes.",
    )
    credits: Optional[float] = Field(
        None,
        description='Number of credits required if type is CREDITS or SUBJECT_CREDITS_AT_LEVEL.',
        ge=0.0,
    )
    expressions: Optional[List[RequisiteExpression]] = Field(
        None, description='Array of nested requisite expressions for AND/OR logic.'
    )
    raw: Optional[str] = Field(
        None,
        description='The original raw text for this specific part of the requisite, if available.',
    )
    value: Optional[str] = Field(
        None, description="The raw string value if the type is 'RAW_UNPARSED'."
    )
    subject: Optional[str] = Field(
        None,
        description="The specific subject area for which the credits are required (e.g., 'STATISTICS', 'ANSC').",
    )
    program: Optional[str] = Field(
        None,
        description="The name of the program for which registration is required, if type is 'PROGRAM_REGISTRATION'.",
    )
    level: Optional[int] = Field(
        None,
        description="The academic level required for subject-specific credits (e.g., 3000 for 3rd year), if type is 'SUBJECT_CREDITS_AT_LEVEL'.",
        ge=0,
    )
    percentage: Optional[float] = Field(
        None,
        description="The minimum percentage required for an average, if type is 'MIN_AVERAGE'.",
        ge=0.0,
        le=100.0,
    )


class Term1(Enum):
    Winter = 'Winter'
    Spring = 'Spring'
    Summer = 'Summer'
    Fall = 'Fall'


class Year(Enum):
    All = 'All'
    Even = 'Even'
    Odd = 'Odd'
    Annually = 'Annually'
    Biennially = 'Biennially'
    Triennially = 'Triennially'


class OfferingPattern(BaseModel):
    terms: Optional[List[Term1]] = Field(
        None, description='Which academic terms the course is typically offered in.'
    )
    years: Optional[List[Year]] = Field(
        None,
        description="Which years the course is typically offered (e.g., 'All', 'Even', 'Odd', 'Annually', 'Biennially').",
    )
    note: Optional[str] = Field(
        None,
        description="Any additional notes about the offering pattern (e.g., 'May be offered online', 'Subject to change').",
    )


class UniversalCourseSchema(BaseModel):
    courseId: str = Field(
        ..., description='A canonical, unique ID for the course across all systems.'
    )
    courseCode: str = Field(
        ..., description="The school-specific code (e.g., 'ACCT*1220', 'CS 101')."
    )
    title: str = Field(..., description='The official title of the course.')
    description: Optional[str] = Field(
        None,
        description='The comprehensive descriptive text for the course, including the main summary.',
    )
    department: Optional[Department] = Field(
        None, description='The primary academic department offering the course.'
    )
    level: Optional[int] = Field(
        None,
        description='The academic level of the course (e.g., 1000 for 1st year, 2000 for 2nd year). This can often be derived from the first digit of the course code.',
        ge=0,
    )
    credits: float = Field(
        ..., description='The academic credit value of the course.', ge=0.0
    )
    countForPrograms: Optional[List[str]] = Field(
        None, description='Program codes this course explicitly counts toward.'
    )
    excludeFromPrograms: Optional[List[str]] = Field(
        None, description='Program codes this course explicitly does NOT count toward.'
    )
    prerequisites: Optional[Union[RequisiteExpression, str]] = Field(
        None, description='Structured expression for prerequisites, or a raw string.'
    )
    corequisites: Optional[Union[RequisiteExpression, str]] = Field(
        None, description='Structured expression for corequisites, or a raw string.'
    )
    antirequisites: Optional[List[str]] = Field(
        None,
        description='Courses that cannot be taken if this course is taken (e.g., duplicate content).',
    )
    crossListings: Optional[List[str]] = Field(
        None,
        description='Other course codes under which this course is also listed (e.g., BIOL 3000 also listed as ENVS 3000).',
    )
    tags: Optional[List[str]] = Field(
        None,
        description="Keywords for interest-based search or categorization (e.g., 'Sustainability', 'Quantitative').",
    )
    termsOffered: Optional[List[OfferingPattern]] = Field(
        None,
        description="General patterns of when the course is offered (e.g., 'Fall Only, All Years'). This complements specific 'sections'.",
    )
    courseStatus: Optional[CourseStatus] = Field(
        None, description='The current status of the course in the catalog.'
    )
    effectiveStartDate: Optional[date] = Field(
        None,
        description='The date from which this course definition (e.g., requisites, credits) is effective.',
    )
    effectiveEndDate: Optional[date] = Field(
        None,
        description='The date until which this course definition is effective, if applicable.',
    )
    sections: Optional[List[Section]] = Field(
        None, description='Specific offerings of this course in various terms.'
    )
    extensions: Optional[
        Dict[str, Union[str, float, bool, List[Any], Dict[str, Any]]]
    ] = Field(None, description='Catch-all for school-specific or non-standard extras.')
    raw: Optional[Dict[str, Any]] = Field(
        None,
        description='Top-level raw source fields, preserving original data if needed.',
    )


RequisiteExpression.model_rebuild()

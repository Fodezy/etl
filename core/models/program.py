# generated by datamodel-codegen:
#   filename:  universal_program.json
#   timestamp: 2025-05-24T02:06:33+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import AnyUrl, BaseModel


class ProgramType(Enum):
    Major = 'Major'
    Minor = 'Minor'
    Cooperative = 'Cooperative'
    Concentration = 'Concentration'
    Certificate = 'Certificate'
    Diploma = 'Diploma'
    Doctoral = 'Doctoral'
    Masters = 'Masterâ€™s'


class CourseRef(BaseModel):
    courseId: str
    code: str
    title: Optional[str] = None
    credits: Optional[float] = None


class RequirementGroup(BaseModel):
    groupId: str
    name: str
    description: Optional[str] = None
    creditsMin: Optional[float] = None
    creditsMax: Optional[float] = None
    courses: Optional[List[CourseRef]] = None


class PanelItem(BaseModel):
    title: str
    paragraphs: Optional[List[str]] = None
    bulletList: Optional[List[str]] = None


class UniversalProgramSchema(BaseModel):
    programId: str
    code: str
    name: str
    description: Optional[str] = None
    url: Optional[AnyUrl] = None
    programTypes: List[ProgramType]
    degreeType: Optional[str] = None
    department: Optional[str] = None
    totalCredits: float
    creditBreakdown: Optional[Dict[str, float]] = None
    overview: Optional[List[str]] = None
    panels: Optional[List[PanelItem]] = None
    requirementGroups: Optional[List[RequirementGroup]] = None
    prerequisiteMap: Optional[Dict[str, List[str]]] = None
    corequisiteMap: Optional[Dict[str, List[str]]] = None
    notes: Optional[List[str]] = None
    extensions: Optional[Dict[str, Any]] = None
    raw: Optional[Dict[str, Any]] = None
